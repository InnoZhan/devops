name: test code

on: push

env:
  HOME_PATH: .
  APP_PATH: ./app_python
  TEST_PATH: ./tests

jobs:
  run_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.APP_PATH }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: poetry install --no-interaction

      - name: Run tests
        run: |
          source .venv/bin/activate
          pip install -r tests/requirements.txt
          pytest ${{ env.TEST_PATH }}

  run_linter:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.HOME_PATH }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install linters
        run:  pip install -r lint_reqirements.txt
      - name: Run linters
        run:  |
          pylint /app_python/server.py
          black /app_python/server.py

  build:
    runs-on: ubuntu-latest
    steps:

      - name: Check Out Repo
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./app_python
          file: ./app_python/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  ${{ secrets.DOCKER_HUB_USERNAME }}/devops_lab:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
